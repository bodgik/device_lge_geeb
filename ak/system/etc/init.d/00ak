#!/system/bin/sh
#
# AK Tuning
# @anarkia1976
#

##########################################################################
### set freqs clock at boot
###
min=384000
max=1728000
echo "$min" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
echo "$min" > /sys/devices/system/cpu/cpu1/cpufreq/scaling_min_freq
echo "$min" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_min_freq
echo "$min" > /sys/devices/system/cpu/cpu3/cpufreq/scaling_min_freq
echo "$max" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
echo "$max" > /sys/devices/system/cpu/cpu1/cpufreq/scaling_max_freq
echo "$max" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq
echo "$max" > /sys/devices/system/cpu/cpu3/cpufreq/scaling_max_freq

##########################################################################
### Set interactive tunables
###
echo "interactive" > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
echo "interactive" > /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
echo "interactive" > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor
echo "interactive" > /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor

# above_hispeed_delay:
# When speed is at or above hispeed_freq, wait for
# this long before raising speed in response to continued high load.
# The format is a single delay value, optionally followed by pairs of
# CPU speeds and the delay to use at or above those speeds. Colons can
# be used between the speeds and associated delays for readability. For
#
# Example:
# 80000 1300000:200000 1500000:40000
#
# uses delay 80000 uS until CPU speed 1.3 GHz, at which speed delay
# 200000 uS is used until speed 1.5 GHz, at which speed (and above)
# delay 40000 uS is used. If speeds are specified these must appear in
# ascending order. Default is 20000 uS.
#echo "20000 918000:40000 1134000:20000" > /sys/devices/system/cpu/cpufreq/interactive/above_hispeed_delay

# target_loads:
# CPU load values used to adjust speed to influence the
# current CPU load toward that value. In general, the lower the target
# load, the more often the governor will raise CPU speeds to bring load
# below the target. The format is a single target load, optionally
# followed by pairs of CPU speeds and CPU loads to target at or above
# those speeds. Colons can be used between the speeds and associated
# target loads for readability.
#
# For example:
# 85 1000000:90 1700000:99
#echo "85 1134000:90 1350000:95" > /sys/devices/system/cpu/cpufreq/interactive/target_loads

# go_hispeed_load:
# The CPU load at which to ramp to hispeed_freq.
# Default is 99%.
#echo "99" > /sys/devices/system/cpu/cpufreq/interactive/go_hispeed_load
echo "1350000" > /sys/devices/system/cpu/cpufreq/interactive/hispeed_freq
#echo "810000" > /sys/devices/system/cpu/cpufreq/interactive/sync_freq

# min_sample_time:
# The minimum amount of time to spend at the current
# frequency before ramping down.
# Default is 80000 uS.
#echo "60000 1134000:80000" > /sys/devices/system/cpu/cpufreq/interactive/min_sample_time

# timer_rate:
# Sample rate for reevaluating CPU load when the CPU is not
# idle. A deferrable timer is used, such that the CPU will not be woken
# from idle to service this timer until something else needs to run.
# (The maximum time to allow deferring this timer when not running at
# minimum speed is configurable via timer_slack.)
# Default is 20000 uS.
#echo "20000 594000:30000 1134000:40000" > /sys/devices/system/cpu/cpufreq/interactive/timer_rate

# timer_slack:
# Maximum additional time to defer handling the governor
# sampling timer beyond timer_rate when running at speeds above the
# minimum. For platforms that consume additional power at idle when
# CPUs are running at speeds greater than minimum, this places an upper
# bound on how long the timer will be deferred prior to re-evaluating
# load and dropping speed. For example, if timer_rate is 20000uS and
# timer_slack is 10000uS then timers will be deferred for up to 30msec
# when not at lowest speed. A value of -1 means defer timers
# indefinitely at all speeds.
# Default is 80000 uS.
#echo "-1 594000:80000 918000:40000 1134000:20000" > /sys/devices/system/cpu/cpufreq/interactive/timer_slack

# sampling_down_factor:
# this parameter controls the rate at which the
# kernel makes a decision on when to decrease the frequency while running
# at top speed. When set to 1 (the default) decisions to reevaluate load
# are made at the same interval regardless of current clock speed. But
# when set to greater than 1 (e.g. 100) it acts as a multiplier for the
# scheduling interval for reevaluating load when the CPU is at its top
# speed due to high load. This improves performance by reducing the overhead
# of load evaluation and helping the CPU stay at its top speed when truly
# busy, rather than shifting back and forth in speed. This tunable has no
# effect on behavior at lower speeds/lower CPU loads.
#echo "100000" > /sys/devices/system/cpu/cpufreq/interactive/sampling_down_factor

# up_threshold:
# defines what the average CPU usage between the samplings
# of 'sampling_rate' needs to be for the kernel to make a decision on
# whether it should increase the frequency. For example when it is set
# to its default value of '95' it means that between the checking
# intervals the CPU needs to be on average more than 95% in use to then
# decide that the CPU frequency needs to be increased.
#echo "50" > /sys/devices/system/cpu/cpufreq/interactive/up_threshold_any_cpu_load
#echo "918000" > /sys/devices/system/cpu/cpufreq/interactive/up_threshold_any_cpu_freq

# This is a flag that determines if waiting for various IO should increase
# the CPU utilization in bump up the cpu frequency.
# For example should you could the time it takes wait for a data transfer
# from another hardware block as cpu load even though the cpu
# isnâ€™t actually doing anything during this time.
# Obviously setting this to 0 will
# mean the governor will increase the frequency less often.
echo "1" > /sys/devices/system/cpu/cpufreq/interactive/io_is_busy

##################################################################
### set cpu boost tunables
###
echo "0" > /sys/module/cpu_boost/parameters/boost_ms
echo "0" > /sys/module/cpu_boost/parameters/sync_threshold
echo "0" > /sys/module/cpu_boost/parameters/input_boost_freq
echo "0" > /sys/module/cpu_boost/parameters/input_boost_ms

##################################################################
### set hotplug tunables
###
echo "500" > /sys/module/msm_hotplug/down_lock_duration
echo "2500" > /sys/module/msm_hotplug/boost_lock_duration
